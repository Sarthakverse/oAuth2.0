spring.application.name=oAuth2
server.port=8080

spring.datasource.url = jdbc:postgresql://localhost:5432/oAuth2
spring.datasource.username = postgres
spring.datasource.password = 4225

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.database=postgresql
spring.jpa.show-sql= true
spring.jpa.open-in-view= false

#spring.security.oauth2.client.registration.google.client-id=
#spring.security.oauth2.client.registration.google.client-secret=
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
#spring.security.oauth2.client.registration.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
#spring.security.oauth2.client.registration.google.token-uri=https://www.googleapis.com/oauth2/v4/token
#spring.security.oauth2.client.registration.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.registration.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.scope=email,profile,address,phone

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=false